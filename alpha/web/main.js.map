{
  "version": 3,
  "file": "main.js",
  "sources": [
    "main.js"
  ],
  "sourcesContent": [
    "import { setupUi } from './ui.js';\nimport { createThreeApp } from './three_integration.js';\n\nfunction normalizeGeometryItems(value) {\n  if (!value || typeof value !== 'object') {\n    return [];\n  }\n  const items = value.items;\n  return Array.isArray(items) ? items : [];\n}\n\nfunction toNumericOrNull(value) {\n  const numeric = Number(value);\n  return Number.isFinite(numeric) ? numeric : null;\n}\n\nfunction normalizeSliders(value) {\n  if (!Array.isArray(value)) {\n    return [];\n  }\n  return value\n    .filter((entry) => entry && typeof entry === 'object')\n    .map((entry) => ({\n      id: String(entry.id ?? ''),\n      name:\n        entry.name !== undefined && entry.name !== null\n          ? String(entry.name)\n          : entry.id !== undefined && entry.id !== null\n            ? String(entry.id)\n            : 'Slider',\n      min: toNumericOrNull(entry.min),\n      max: toNumericOrNull(entry.max),\n      step: toNumericOrNull(entry.step),\n      value: toNumericOrNull(entry.value) ?? 0,\n    }));\n}\n\nasync function init() {\n  const ui = setupUi();\n  ui.setStatus('Initialiseren van WebAssembly en Three.js\u2026');\n\n  const three = createThreeApp(ui.canvas);\n  try {\n    await three.ready;\n  } catch (error) {\n    console.warn('Three.js kon niet worden ge\u00efnitialiseerd:', error);\n    ui.setStatus(error?.message ?? 'Three.js kon niet worden ge\u00efnitialiseerd.');\n  }\n\n  if (!three.isWebGPUSupported()) {\n    ui.setStatus(\n      'WebGPU wordt niet ondersteund in deze browser. De UI werkt, maar er wordt geen 3D-weergave getoond.'\n    );\n  }\n\n  let wasmModule;\n  try {\n    wasmModule = await import('./pkg/ghx_engine.js');\n  } catch (error) {\n    console.error('Kon de WebAssembly module niet laden:', error);\n    ui.setStatus(\n      'Kon de WebAssembly module niet laden. Draai `wasm-pack build --target web` in `alpha/ghx-engine` en plaats de output in `alpha/web/pkg`.'\n    );\n    return;\n  }\n\n  const { default: initWasm, Engine } = wasmModule;\n\n  try {\n    await initWasm();\n  } catch (error) {\n    console.error('Fout bij initialisatie van de WebAssembly module:', error);\n    ui.setStatus('Fout bij het initialiseren van de GHX-engine: ' + (error?.message ?? String(error)));\n    return;\n  }\n\n  const engine = new Engine();\n\n  function syncSliders({ replace = false } = {}) {\n    let sliderData;\n    try {\n      sliderData = engine.get_sliders();\n    } catch (error) {\n      if (replace) {\n        ui.renderSliders([]);\n      }\n      console.warn('Kon slidergegevens niet ophalen:', error);\n      return [];\n    }\n\n    const sliders = normalizeSliders(sliderData);\n\n    if (replace) {\n      ui.renderSliders(sliders);\n      return sliders;\n    }\n\n    let requiresRerender = false;\n    for (const slider of sliders) {\n      const updated = ui.updateSliderValue(slider.id, slider.value);\n      if (!updated) {\n        requiresRerender = true;\n      }\n    }\n\n    if (requiresRerender) {\n      ui.renderSliders(sliders);\n    }\n\n    return sliders;\n  }\n\n  function evaluateAndRender({ announce } = {}) {\n    try {\n      engine.evaluate();\n    } catch (error) {\n      console.error('Evaluatiefout:', error);\n      three.updateGeometry([]);\n      ui.setStatus('Evaluatie mislukt: ' + (error?.message ?? String(error)));\n      return;\n    }\n\n    let geometry;\n    try {\n      geometry = engine.get_geometry();\n    } catch (error) {\n      console.error('Kon geometrie niet ophalen:', error);\n      three.updateGeometry([]);\n      ui.setStatus('Geometrie ophalen mislukt: ' + (error?.message ?? String(error)));\n      return;\n    }\n\n    const items = normalizeGeometryItems(geometry);\n    three.updateGeometry(items);\n\n    if (announce) {\n      ui.setStatus(announce);\n    }\n  }\n\n  async function loadGhxFromText(contents, label) {\n    if (typeof contents !== 'string' || !contents.trim()) {\n      ui.setStatus('Het GHX-bestand is leeg of ongeldig.');\n      return;\n    }\n\n    ui.showLoading(true);\n    try {\n      engine.load_ghx(contents);\n      syncSliders({ replace: true });\n      evaluateAndRender({ announce: label ? `GHX geladen (${label})` : 'GHX-bestand geladen.' });\n    } catch (error) {\n      console.error('Fout bij het laden van GHX:', error);\n      ui.renderSliders([]);\n      three.updateGeometry([]);\n      ui.setStatus('Fout bij het laden van het GHX-bestand: ' + (error?.message ?? String(error)));\n    } finally {\n      syncSliders();\n      ui.showLoading(false);\n    }\n  }\n\n  async function loadDefaultSample() {\n    const sampleName = 'minimal_line.ghx';\n    try {\n      const response = await fetch(`../tools/ghx-samples/${sampleName}`, { cache: 'no-store' });\n      if (!response.ok) {\n        throw new Error(`Kon ${sampleName} niet ophalen (status ${response.status}).`);\n      }\n      const text = await response.text();\n      await loadGhxFromText(text, sampleName);\n    } catch (error) {\n      console.warn('Kon standaard GHX niet laden:', error);\n      ui.setStatus('Selecteer een GHX-bestand om te starten.');\n      ui.renderSliders([]);\n      three.updateGeometry([]);\n    }\n  }\n\n  async function handleFileSelection(file) {\n    if (!file) {\n      ui.setStatus('Geen bestand geselecteerd.');\n      return;\n    }\n\n    try {\n      const text = await file.text();\n      await loadGhxFromText(text, file.name ?? 'gekozen bestand');\n    } catch (error) {\n      console.error('Fout bij lezen van bestand:', error);\n      ui.setStatus('Kon het geselecteerde bestand niet lezen: ' + (error?.message ?? String(error)));\n    }\n  }\n\n  function handleSliderChange(sliderId, value) {\n    if (!sliderId) {\n      return;\n    }\n    try {\n      engine.set_slider_value(sliderId, value);\n      syncSliders();\n      evaluateAndRender();\n    } catch (error) {\n      console.error('Slider-update mislukt:', error);\n      syncSliders({ replace: true });\n      ui.setStatus('Kon slider niet aanpassen: ' + (error?.message ?? String(error)));\n    }\n  }\n\n  function handleOverlayToggle(enabled) {\n    three.setOverlayEnabled(enabled);\n    ui.setOverlayState(enabled);\n  }\n\n  ui.setHandlers({\n    onFileSelected: handleFileSelection,\n    onSliderChange: handleSliderChange,\n    onOverlayToggle: handleOverlayToggle,\n  });\n\n  ui.setOverlayState(true);\n  three.setOverlayEnabled(true);\n\n  await loadDefaultSample();\n}\n\ninit().catch((error) => {\n  console.error('Onherstelbare fout tijdens initialisatie:', error);\n});\n\n//# sourceMappingURL=main.js.map\n"
  ],
  "names": [],
  "mappings
}