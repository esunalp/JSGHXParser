{
  "version": 3,
  "file": "ui.js",
  "sources": [
    "ui.js"
  ],
  "sourcesContent": [
    "const DEFAULT_SLIDER_MIN = 0;\nconst DEFAULT_SLIDER_MAX = 100;\n\nfunction formatValue(value, step) {\n  if (!Number.isFinite(value)) {\n    return '';\n  }\n  const precision = step && !Number.isInteger(step) ? Math.min(6, Math.ceil(-Math.log10(step))) : 0;\n  return Number.parseFloat(value).toFixed(Math.max(0, precision));\n}\n\nfunction createSliderElement(slider, handlers) {\n  const wrapper = document.createElement('div');\n  wrapper.className = 'slider';\n  wrapper.dataset.sliderId = slider.id;\n\n  const labelRow = document.createElement('div');\n  labelRow.className = 'slider-label';\n\n  const nameSpan = document.createElement('span');\n  nameSpan.textContent = slider.name ?? slider.id ?? 'Slider';\n  const valueSpan = document.createElement('span');\n  labelRow.append(nameSpan, valueSpan);\n\n  const inputsRow = document.createElement('div');\n  inputsRow.className = 'slider-inputs';\n\n  const rangeInput = document.createElement('input');\n  rangeInput.type = 'range';\n\n  const numberInput = document.createElement('input');\n  numberInput.type = 'number';\n\n  const hasMin = Number.isFinite(slider.min);\n  const hasMax = Number.isFinite(slider.max);\n  const hasStep = Number.isFinite(slider.step) && slider.step > 0;\n\n  const lowerBound = hasMin ? slider.min : DEFAULT_SLIDER_MIN;\n  let upperBound = hasMax ? slider.max : DEFAULT_SLIDER_MAX;\n  if (upperBound < lowerBound) {\n    upperBound = lowerBound;\n  }\n\n  const numericStep = hasStep ? slider.step : Math.max((upperBound - lowerBound) / 100, 0.0001);\n  const formatStep = hasStep ? Math.abs(slider.step) : undefined;\n\n  rangeInput.min = String(lowerBound);\n  rangeInput.max = String(upperBound);\n  rangeInput.step = String(numericStep);\n  rangeInput.setAttribute('aria-label', `${nameSpan.textContent} (range)`);\n\n  if (hasMin) {\n    numberInput.min = String(lowerBound);\n  }\n  if (hasMax) {\n    numberInput.max = String(upperBound);\n  }\n  numberInput.step = hasStep ? String(slider.step) : 'any';\n  numberInput.setAttribute('aria-label', `${nameSpan.textContent} (nummer)`);\n\n  const clamp = (value) => {\n    let result = Number.isFinite(value) ? value : lowerBound;\n    if (hasMin && result < lowerBound) {\n      result = lowerBound;\n    }\n    if (hasMax && result > upperBound) {\n      result = upperBound;\n    }\n    return result;\n  };\n\n  let committedValue = clamp(Number(slider.value));\n\n  const applyValue = (value, { updateRange = true, updateNumber = true } = {}) => {\n    committedValue = clamp(value);\n    valueSpan.textContent = formatValue(committedValue, formatStep);\n    if (updateRange) {\n      rangeInput.value = String(committedValue);\n    }\n    if (updateNumber) {\n      numberInput.value = String(committedValue);\n    }\n  };\n\n  applyValue(committedValue, { updateRange: true, updateNumber: true });\n\n  const emitChange = (value) => {\n    if (typeof handlers.onSliderChange === 'function') {\n      handlers.onSliderChange(slider.id, clamp(value));\n    }\n  };\n\n  rangeInput.addEventListener('input', (event) => {\n    const numeric = Number(event.target.value);\n    if (Number.isNaN(numeric)) {\n      return;\n    }\n    applyValue(numeric, { updateRange: false });\n    emitChange(numeric);\n  });\n\n  const commitNumberValue = (rawValue) => {\n    const numeric = Number(rawValue);\n    if (Number.isNaN(numeric)) {\n      applyValue(committedValue);\n      return;\n    }\n    applyValue(numeric);\n    emitChange(numeric);\n  };\n\n  numberInput.addEventListener('change', (event) => {\n    commitNumberValue(event.target.value);\n  });\n\n  numberInput.addEventListener('blur', (event) => {\n    commitNumberValue(event.target.value);\n  });\n\n  numberInput.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      commitNumberValue(event.target.value);\n    }\n  });\n\n  numberInput.addEventListener('input', (event) => {\n    const numeric = Number(event.target.value);\n    if (Number.isNaN(numeric)) {\n      valueSpan.textContent = '';\n      return;\n    }\n    valueSpan.textContent = formatValue(numeric, formatStep);\n  });\n\n  inputsRow.append(rangeInput, numberInput);\n  wrapper.append(labelRow, inputsRow);\n\n  return {\n    element: wrapper,\n    controller: {\n      update(value) {\n        applyValue(value);\n      },\n    },\n  };\n}\n\nexport function setupUi() {\n  const canvas = document.getElementById('viewport');\n  const fileInput = document.getElementById('ghx-input');\n  const statusOutput = document.getElementById('status');\n  const sliderContainer = document.getElementById('slider-container');\n  const overlayToggle = document.getElementById('overlay-toggle');\n  const overlayState = document.getElementById('overlay-state');\n  const loadingOverlay = document.getElementById('loading-overlay');\n\n  const sliderElements = new Map();\n  const handlers = {\n    onFileSelected: null,\n    onSliderChange: null,\n    onOverlayToggle: null,\n  };\n\n  const setStatus = (text) => {\n    if (statusOutput) {\n      statusOutput.textContent = text;\n    }\n  };\n\n  const showLoading = (active) => {\n    if (!loadingOverlay) {\n      return;\n    }\n    if (active) {\n      loadingOverlay.classList.remove('loading-overlay--hidden');\n      loadingOverlay.setAttribute('aria-hidden', 'false');\n    } else {\n      loadingOverlay.classList.add('loading-overlay--hidden');\n      loadingOverlay.setAttribute('aria-hidden', 'true');\n    }\n  };\n\n  const setOverlayState = (enabled) => {\n    const isEnabled = Boolean(enabled);\n    if (overlayToggle) {\n      overlayToggle.checked = isEnabled;\n      overlayToggle.setAttribute('aria-checked', isEnabled ? 'true' : 'false');\n    }\n    if (overlayState) {\n      overlayState.textContent = isEnabled ? 'true' : 'false';\n    }\n  };\n\n  const renderSliders = (sliders = []) => {\n    sliderElements.clear();\n\n    if (!sliderContainer) {\n      return;\n    }\n\n    sliderContainer.innerHTML = '';\n\n    if (!sliders.length) {\n      const empty = document.createElement('p');\n      empty.textContent = 'Geen sliders beschikbaar voor dit model.';\n      empty.style.opacity = '0.65';\n      empty.style.fontSize = '0.9rem';\n      sliderContainer.appendChild(empty);\n      return;\n    }\n\n    for (const slider of sliders) {\n      if (!slider?.id) {\n        continue;\n      }\n      const { element, controller } = createSliderElement(slider, handlers);\n      sliderContainer.appendChild(element);\n      sliderElements.set(String(slider.id), controller);\n    }\n  };\n\n  const updateSliderValue = (sliderId, value) => {\n    const controller = sliderElements.get(String(sliderId));\n    if (!controller) {\n      return false;\n    }\n    controller.update(value);\n    return true;\n  };\n\n  const setHandlers = (newHandlers = {}) => {\n    handlers.onFileSelected = typeof newHandlers.onFileSelected === 'function' ? newHandlers.onFileSelected : null;\n    handlers.onSliderChange = typeof newHandlers.onSliderChange === 'function' ? newHandlers.onSliderChange : null;\n    handlers.onOverlayToggle = typeof newHandlers.onOverlayToggle === 'function' ? newHandlers.onOverlayToggle : null;\n  };\n\n  if (fileInput) {\n    fileInput.addEventListener('change', () => {\n      const file = fileInput.files && fileInput.files[0] ? fileInput.files[0] : null;\n      if (typeof handlers.onFileSelected === 'function') {\n        handlers.onFileSelected(file);\n      }\n      // Laat dezelfde bestandsselectie opnieuw toe\n      fileInput.value = '';\n    });\n  }\n\n  if (overlayToggle) {\n    overlayToggle.addEventListener('change', () => {\n      const checked = overlayToggle.checked;\n      setOverlayState(checked);\n      if (typeof handlers.onOverlayToggle === 'function') {\n        handlers.onOverlayToggle(checked);\n      }\n    });\n  }\n\n  return {\n    canvas,\n    setHandlers,\n    renderSliders,\n    updateSliderValue,\n    setStatus,\n    showLoading,\n    setOverlayState,\n  };\n}\n\n//# sourceMappingURL=ui.js.map\n"
  ],
  "names": [],
  "mappings
}